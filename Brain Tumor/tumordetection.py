import cv2
import numpy as np
import os
import matplotlib.pyplot as plt
import tkinter
from tkinter import *
from tkinter import filedialog
from tkinter import simpledialog
from tkinter import messagebox


root = tkinter.Tk()
root.geometry('1100x600')
root.resizable(width=False,
             height=False
             )
root.title('Brain Tumor')
filename = PhotoImage(file="bg.png")
background_label = Label(root,
                         image=filename
                         )
background_label.place(x=0,y=0)
##label = Label(root,
##              text="Brain Tumor",
##              bg='lemon chiffon',
##              font=('helvetica 30 bold'))
##label.pack(side=TOP)

statusbar=Label(root,
                width=110,
                text="A project by Team SAHARA",
                font=("arial",13,"bold"),
                bg="black",
                fg="white",
                relief=SUNKEN
                )

statusbar.place(x=0,y=575)

files=['']

def get_files():
    file = filedialog.askopenfilenames(parent=root,title='Choose a file')
    file = root.tk.splitlist(file)
    print(file[0])
    files[0]=file[0]
    messagebox.showinfo('Ok', 'Image has been selected')

    
def destroy():
    root.destroy()

def auto_canny(image, sigma=0.33):
  # compute the median of the single channel pixel intensities
  v = np.median(image)
  # apply automatic Canny edge detection using the computed median
  lower = int(max(0, (1.0 - sigma) * v))
  upper = int(min(255, (1.0 + sigma) * v))
  edged = cv2.Canny(image, lower, upper)
  # return the edged image
  return edged
def inp():
  path=str(files[0])
  org = cv2.imread(path)
  dim=(500,590)
  org=cv2.resize(org, dim)
  image = cv2.imread(path)
  image=cv2.resize(image, dim)
  cv2.imshow('img',org)

  gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY, 0.7)
  cv2.imshow('gray',gray)
  (T, thresh) = cv2.threshold(gray, 155, 255, cv2.THRESH_BINARY)
  cv2.imshow('thresh',thresh)
  (T, threshInv) = cv2.threshold(gray, 155, 255,cv2.THRESH_BINARY_INV)
  cv2.imshow('threshInv',threshInv)

  kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (10, 5))
  closed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
  cv2.imshow('closed',closed)
  closed = cv2.erode(closed, None, iterations = 14)
  closed = cv2.dilate(closed, None, iterations = 13)

  ret,mask = cv2.threshold(closed, 155, 255, cv2.THRESH_BINARY) 
  #apply AND operation on image and mask generated by thrresholding
  final = cv2.bitwise_and(image,image,mask = mask) 
  #plot the result
  #cv2.imshow('final',final)
  canny = auto_canny(closed)
  #cv2.imshow('canny',canny)

  (cnts, _) = cv2.findContours(canny.copy(), cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)

  cv2.drawContours(image, cnts, -1, (0, 0, 255), 2)
  #cv2.imshow('final',image)

  finalout=np.concatenate((org,image),axis=1)
  cv2.imshow('Input V/S Output',finalout)
  cv2.waitKey(0)
  cv2.destroyAllWindows()

b1=Button(root,
          padx=5,
          pady=5,
          width=12,
          bg='DodgerBlue1',
          fg='white',
          relief=GROOVE,
          command=get_files,
          text='SELECT IMG',
          font=('helvetica 15 bold'),
          activebackground='light green'
          )

b1.place(x=780,y=150)

b2=Button(root,
          padx=5,
          pady=5,
          width=12,
          bg='gray64',
          fg='white',
          relief=GROOVE,
          command=inp,
          text='SCAN',
          font=('helvetica 15 bold'),
          activebackground='light green'
          )

b2.place(x=780,y=300)

b3=Button(root,
          padx=5,
          pady=5,
          width=12,
          bg='orange red',
          fg='white',
          relief=GROOVE,
          text='EXIT',
          command=destroy,
          font=('helvetica 15 bold'),
          activebackground='red'
          )
b3.place(x=780,y=450)
root.mainloop()
